// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package convagg.crypto;

// For compatibility with protobuf lite.
option optimize_for = LITE_RUNTIME;

import "dpf/distributed_point_function.proto";

// For serialization of elgamal::Ciphertext
// http://google3/privacy/blinders/cpp/crypto/elgamal.h?rcl=321831591&l=39
message ElGamalCiphertext {
  bytes u = 1;
  bytes e = 2;
}

// For serialization of elgamal::PublicKey
// http://google3/privacy/blinders/cpp/crypto/elgamal.h?rcl=321831591&l=45
message ElGamalPublicKey {
  bytes g = 1 ;

  bytes y = 2 ;
}

// For serialization of elgamal::PrivateKey
// http://google3/privacy/blinders/cpp/crypto/elgamal.h?rcl=321831591&l=50
message ElGamalPrivateKey {
  bytes x = 1 ;
}

// StandardCiphertext holds a ciphertext encrypted under the
// ECIES-HKDF-AES128GCM encryption scheme.
message StandardCiphertext {
  bytes data = 1;
}

// PartialReport contains the key and value shares split from the original
// conversion. Each raw conversion is split into two partial reports for two
// helpers, respectively.
message PartialReport {
  ElGamalCiphertext encrypted_conversion_key = 1;
  uint32 value_share = 2;
  bytes key_share = 3;
}

// PartialAggregation contains the aggregation results from one of the helpers
// for one specific aggregation ID.
message PartialAggregation {
  bytes key_share = 1;
  int64 partial_count = 2;
  uint32 partial_sum = 3;
}

// Public key in ECIES-HKDF-AES128GCM encryption scheme.
message StandardPublicKey {
  bytes key = 1 ;
}

// Private key in ECIES-HKDF-AES128GCM encryption scheme.
message StandardPrivateKey {
  bytes key = 1 ;
}

// The DPF key share for 'SUM' from a conversion record.
message PartialReportDpf {
  distributed_point_functions.DpfKey sum_key = 1;
}

// PartialAggregationDpf contains the aggregation results from one of the
// helpers for one specific bucket of the histogram.
message PartialAggregationDpf {
  uint64 partial_sum = 1;
}

// DomainPrefixes contains the prefixes to expand the DPF keys in a certain
// domain.
message DomainPrefixes {
  repeated uint64 prefix = 1;
}

// HierarchicalPrefixes contains the prefixes for each of the hierarchical
// domains.
message HierarchicalPrefixes {
  // For the first level of expansion, the prefixes must be empty:
	// http://google3/third_party/distributed_point_functions/dpf/distributed_point_function.h?l=86&rcl=368846188
  repeated DomainPrefixes prefixes = 1;
}

// IncrementalDpfParameters contains DPF parameters for key generation and
// expansion in each of the hierarchical domains.
message IncrementalDpfParameters {
  repeated distributed_point_functions.DpfParameters params = 1;
}
