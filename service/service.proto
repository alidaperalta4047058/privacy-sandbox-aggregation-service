// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package aggregation;

// For compatibility with protobuf lite.
option optimize_for = LITE_RUNTIME;

import "pipeline/crypto.proto";


service Aggregator {
  // Generate pairs of private/public keys for standard and ElGamal encryption,
  // and send the public keys back in the response.
  rpc CreateCryptoKeys(CreateCryptoKeysRequest)
      returns (CreateCryptoKeysResponse) {}

  // Make the helper save the ElGamal public key from the other helper.
  rpc SaveOtherHelperInfo(SaveOtherHelperInfoRequest)
      returns (SaveOtherHelperInfoResponse) {}

  // Apply exponentiation on the encrypted keys for the other helper.
  rpc ExponentiateConversionKey(ExponentiateConversionKeyRequest)
      returns (ExponentiateConversionKeyResponse) {}

  // Aggregate partial report with the reencrypted keys from the other helper.
  rpc AggregatePartialReport(AggregatePartialReportRequest)
      returns (AggregatePartialReportResponse) {}

  // Aggregate partial report generated by the DPF protocol.
  rpc AggregateDpfPartialReport(AggregateDpfPartialReportRequest)
      returns (AggregateDpfPartialReportResponse) {}
}

message CreateCryptoKeysRequest {}

message CreateCryptoKeysResponse {
  convagg.crypto.StandardPublicKey standard_public_key = 1;
  convagg.crypto.ElGamalPublicKey elgamal_public_key = 2;
}

message SaveOtherHelperInfoRequest {
  convagg.crypto.ElGamalPublicKey elgamal_public_key = 1;
}

message SaveOtherHelperInfoResponse {}

message ExponentiateConversionKeyRequest {
  string partial_report_file = 1;
  string exponentiated_key_file = 2;
}

message ExponentiateConversionKeyResponse {}

message AggregatePartialReportRequest {
  string partial_report_file = 1;
  string exponentiated_key_file = 2;
  string partial_aggregation_file = 3;
  // This is only for experiment with the prototype. The privacy should always
  // be protected in prod.
  bool ignore_privacy = 4;
}

message AggregatePartialReportResponse {}

message AggregateDpfPartialReportRequest{
  string partial_report_file = 1;
  string partial_histogram_file = 2;
  string prefixes_file = 3;
  string sum_dpf_parameters_file = 4;
  string count_dpf_parameters_file = 5;
}

message AggregateDpfPartialReportResponse {}

